<style lang="less">
page{
  background: #efefef;
  font-size: 30rpx;
  .member{
    width: 100%;
    display: flex;
    flex-direction: column;
    align-items: flex-start;
    justify-content: flex-start;
    .memberBar{
      width: e("calc(100% - 40rpx)");
      height:150rpx;
      padding: 0 20rpx;
      display: flex;
      align-items: center;
      justify-content: space-between;
      background: #fff;
      text{
        font-weight: bold;
        color: #333;
      }
      image{
        width: 80rpx;
        height: 80rpx;
        border-radius: 50%;
      }
      .memberInfo{
        width: e("calc(100% - 40rpx)");
        height:100rpx;
        padding: 0 20rpx;
        display: flex;
        flex-direction: column;
        align-items: flex-start;
        justify-content: space-between;
        .memberPhone{
          font-size: 28rpx;
          font-weight: normal !important;
          color: #666 !important;
        }

      }
    }
    &_columnTit{
      width: e("calc(100% - 40rpx)");
      height: 100rpx;
      display: flex;
      align-items: center;
      justify-content: space-between;
      padding: 0 20rpx;
      color: #666;
      .columnItem{
        display: flex;
        align-items: center;
      }
      image{
        width: 50rpx;
        height: 50rpx;
      }
    }
    .roomList{
      width: 100%;
      display: flex;
      flex-direction: column;
      align-items: space-between;
      justify-content: center;
      margin-bottom: 140rpx;
      background: #fff;
      .roomItem{
        width: e("calc(100% - 40rpx)");
        padding: 0 20rpx;
        display: flex;
        flex-direction: column;
        align-items: space-between;
        justify-content: flex-start;
        border-bottom: 1px solid #efefef;
        .noBotBorder{
          border-bottom: 0px !important;
        }
        .roomInfo{
          width: 100%;
          height: 100rpx;
          display: flex;
          align-items: center;
          justify-content: flex-start;
          image{
            width: 50rpx;
            height: 50rpx;
          }
          text{
            display: flex;
            flex-grow: 1;
            align-items: center;
            justify-content: flex-start;
          }
          .open{
            transform:rotate(90deg);
          }
          .close{
            transform:rotate(-90deg);
          }
        }
        .eqList{
          width: 100%;
          display: flex;
          flex-direction: column;
          align-items: center;
          justify-content: flex-start;
          .eqItem{
            width: 100%;
            height: 80rpx;
            display: flex;
            align-items: center;
            justify-content: space-between;
            image{
              width: 40rpx;
              height: 40rpx;
            }
            text{
              padding-left: 50rpx;
            }
          }
        }
      }
    }
    &_bt{
      width: 100%;
      height: 100rpx;
      display: flex;
      align-items: center;
      justify-content: space-between;
      position: fixed;
      left: 0;
      bottom:0;
      margin-top: 200px;
      text-align: center;
      line-height: 100rpx;
      background: red;
      font-size: 32rpx;
      color: #fff;
      margin: 20px auto auto auto;
      border-radius: 0rpx;
      .deleteMember{
        width: 100%;
        background: #666;
        text-align: center;
        line-height: 100rpx;
      }
      .saveModify{
        width: 100%;
        background: red;
        text-align: center;
        line-height: 100rpx;
      }
    }
  }
}
</style>
<template>
  <view class='member'>
    <view class='blankBar'  style="width: 100%;height: 20rpx;"></view>
    <view class='memberBar'>
      <image class='memberAvatar' src="{{member_avatar}}"></image>
      <view class='memberInfo'>
        <text>{{member_name}}</text>
        <text class='memberPhone'>{{member_phone}}</text>
      </view>
    </view>

    <view class='member_columnTit'>
      <view class='columnItem'><text>共享设置：</text></view>
    </view>

    <!-- room -->
    <view class='roomList'>
      <view class="roomItem {{Idx == homeInfo.roomList.length-1?'noBotBorder':''}}" wx:for-items="{{homeInfo.roomList}}" wx:for-item="room" wx:key="roomIdx" wx:for-index="roomIdx">
        <view class='roomInfo'>
          <image @tap="toggleWhole({{roomIdx}})" src="{{room.ifCheck?'../../images/icons/check.png':'../../images/icons/square.png'}}"></image>
          <text>{{room.house_name}}</text>
          <image @tap="toggleOpenClose({{roomIdx}})" class="{{!room.ifOpen?'open':'close'}}" src='../../images/icons/arrow-right.png'></image>
        </view>
        <view wx:if="{{room.ifOpen}}" class='eqList' wx:for-items="{{room.deviceList}}" wx:for-item="equipment" wx:key="equipmentIdx" wx:for-index="equipmentIdx">
          <view class='eqItem'>
            <text>{{equipment.device_name}}</text>
            <image @tap="toggleSingleEq({{equipmentIdx}}, {{roomIdx}})" src="{{equipment.ifCheck?'../../images/icons/radioChecked.png':'../../images/icons/radiobox.png'}}"></image>
          </view>
        </view>
      </view>
    </view>
    <view class='member_bt'>
      <view class='deleteMember' @tap="deleteMember">移除成员</view>
      <view class='saveModify' @tap="saveSet">保存修改</view>
    </view>
  <toast/>
  </view>
</template>

<script>
  import wepy from 'wepy'
  import { connect } from 'wepy-redux'
  import Toast from 'wepy-com-toast'
  import testMixin from '../../mixins/test'

  @connect({
    homeList (state) {
      return state.counter.homeList
    },
    userInfo (state) {
      return state.counter.userInfo
    },
    urlPre (state) {
      return state.counter.urlPre
    }
  }, {
  })

  export default class My extends wepy.page {
    config = {
      navigationBarTitleText: '家庭成员'
    }
    components = {
      toast: Toast
    }

    mixins = [testMixin]

    data = {
      homeId: null,
      homeRegisterId: null,
      MemberRegisterId: null,
      member_avatar: null,
      member_name: null,
      member_phone: null,
      houseList: [],
      homeInfo: {
        roomList: [
          {roomName: '书房', roomId: 0, ifOpen: true, ifCheck: true, equipments: [{eqName: '书房设备1', eqId: 0, ifCheck: true}, {eqName: '书房设备2', eqId: 2, ifCheck: true}]},
          {roomName: '客厅', roomId: 0, ifOpen: false, ifCheck: true, equipments: [{eqName: '客厅设备1', eqId: 0, ifCheck: true}, {eqName: '客厅设备2', eqId: 2, ifCheck: true}]}
        ]
      }
    }

    computed = {
    }

    methods = {
      ToCenter () {
        this.$navigate('./center')
      },
      // 房间下全选切换
      toggleWhole (IDX) {
        let IfCheck = this.homeInfo.roomList[IDX].ifCheck
        this.homeInfo.roomList[IDX].ifCheck = !IfCheck
        this.homeInfo.roomList[IDX].deviceList.map((Eq, Idx) => {
          Eq.ifCheck = !IfCheck
        })
        this.$apply()
      },
      // 房间展开与否
      toggleOpenClose (IDX) {
        console.log('IDX-------------------')
        console.log(IDX)
        // 只有一个是展开的
        this.homeInfo.roomList.map((Room, Idx) => {
          if (Idx === IDX) {
            Room.ifOpen = !Room.ifOpen
          } else {
            Room.ifOpen = false
          }
        })
        // 允许多个是展开的
        // let IfOpen = this.homeInfo.roomList[IDX].ifOpen
        // this.homeInfo.roomList[IDX].ifOpen = !IfOpen
        this.$apply()
      },
      // 单选设备
      toggleSingleEq (EqIdx, RoomIdx) {
        let EqList = this.homeInfo.roomList[RoomIdx].deviceList
        let EQ = EqList[EqIdx]
        let hasCheckedItem = false
        if (!EQ.ifCheck) {
          this.homeInfo.roomList[RoomIdx].ifCheck = true
        } else {
          EqList.map((Eq, Idx) => {
            if (Idx !== EqIdx) {
              if (Eq.ifCheck) {
                hasCheckedItem = true
              }
            }
          })
          // 是否含有勾选项
          console.log('hasCheckedItem-------------')
          console.log(hasCheckedItem)
          if (hasCheckedItem) {
            this.homeInfo.roomList[RoomIdx].ifCheck = true
          } else {
            this.homeInfo.roomList[RoomIdx].ifCheck = false
          }
          // this.homeInfo.roomList[RoomIdx].ifCheck === hasCheckedItem
          this.$apply()
          // this.homeInfo.roomList[RoomIdx].ifCheck = (hasCheckedItem ? true : false)
        }
        // 单选状态切换
        this.homeInfo.roomList[RoomIdx].deviceList[EqIdx].ifCheck = !EQ.ifCheck
        this.$apply()
      },
      saveSet () {
        console.log('tap saveSet---------')
        this.setInfoAsync()
        // console.log(this.homeInfo)
        // let tempSetInfo = []
        // this.homeInfo.roomList.map((House,idx) => {
        //   if (House.ifCheck) {
        //     let homeObj = {
        //       'home_id': this.homeId,
        //       'house_id': '',
        //       'register_id': this.$parent.globalData.register_id,
        //       'device_member': []
        //     }
        //     House.deviceList.map((Device, idx) => {
        //       if (Device.ifCheck) {
        //         let deviceObj = {
        //           'second_control_id': Device.second_control_id,
        //           'main_control_code': Device.main_control_code,
        //           'register_id': this.$parent.globalData.register_id,
        //           'second_control_device_id': Device.id,
        //           'home_id': this.homeId,
        //           'house_id': ''
        //         }
        //         homeObj.device_member.push(deviceObj)
        //       }
        //     })
        //     tempSetInfo.push(homeObj)
        //   }
        // })
        // console.log(tempSetInfo)
      },
      deleteMember () {
        return new Promise((resolve, reject) => {
          wepy.request({
            url: this.urlPre + '/',
            data: {},
            method: 'POST'
          }).then((res) => {
            switch (res.data.code) {
              case 1:
                wepy.hideLoading()
                wepy.showToast({
                  title: '授权成功!',
                  icon: 'success'
                })
                resolve(res)
                break
              case 0:
                wepy.hideLoading()
                this.$invoke('toast', 'show', {
                  title: '服务器繁忙！',
                  img: '../../images/icons/attention.png'
                })
                break
              default:
                wepy.hideLoading()
                this.$invoke('toast', 'show', {
                  title: '服务器繁忙！',
                  img: '../../images/icons/attention.png'
                })
            }
          }).catch((res) => {
            console.log(res)
            wepy.hideLoading()
            this.$invoke('toast', 'show', {
              title: '服务器繁忙！',
              img: '../../images/icons/attention.png'
            })
          })
        })
      }

    }

    // self fn
    getHomeWholeInfo (HomeId, OldHouseList) {
      return new Promise((resolve, reject) => {
        wepy.request({
          url: this.urlPre + '/authorization?home_id=' + HomeId + '&register_id=' + this.$parent.globalData.register_id,
          method: 'GET'
        }).then((res) => {
          let temp = res.data.houseList.slice(0)
          temp.map((RoomW, IdxW) => {
            RoomW.ifOpen = false
            if (OldHouseList[IdxW].ifCheck === 1) {
              RoomW.ifCheck = true
            } else {
              RoomW.ifCheck = false
            }
            RoomW.deviceList.map((EQ, idx) => {
              if (OldHouseList[IdxW].deviceList[idx].ifCheck === 1) {
                EQ.ifCheck = true
              } else {
                EQ.ifCheck = false
              }
            })
          })
          // temp.map((Room, idx) => {
          //   Room.ifOpen = false
          //   Room.ifCheck = true
          //   Room.deviceList.map((EQ, idx) => {
          //     EQ.ifCheck = true
          //   })
          // })
          console.log(temp)
          this.homeInfo.roomList = temp
          this.$apply()
          resolve(res.data.houseList)
        }).catch((res) => {
          console.log(res)
          wepy.hideLoading()
          this.$invoke('toast', 'show', {
            title: '服务器繁忙！',
            img: '../../../images/icons/attention.png'
          })
        })
      })
    }
    getIfAuthorized (HomeId) {
      return new Promise((resolve, reject) => {
        wepy.request({
          url: this.urlPre + '/authorizationEdit?home_id=' + HomeId + '&register_id=' + this.homeRegisterId + '&member_id=' + this.MemberRegisterId,
          method: 'GET'
        }).then((res) => {
          this.getHomeWholeInfo(HomeId, res.data.houseList)
          // if (res.data.houseList.length === 0) {
          //   // 没有授权信息则获取全部
          //   this.getHomeWholeInfo(HomeId)
          // } else {
          //   // 授权过了则授权的显示打勾
          //   this.homeInfo.roomList = res.data.houseList
          //   this.$apply()
          // }
          resolve(res.data.houseList)
        }).catch((res) => {
          console.log(res)
          wepy.hideLoading()
          this.$invoke('toast', 'show', {
            title: '服务器繁忙！',
            img: '../../../images/icons/attention.png'
          })
        })
      })
    }
    // 授权信息
    async setInfoAsync () {
      const SetInfoData = await this.composeSetInfo()
      console.log('in setInfoAsync-------------')
      console.log(SetInfoData)
      this.sureSaveSet(SetInfoData)
    }
    composeSetInfo () {
      // console.log(this.homeInfo)
      return new Promise((resolve, reject) => {
        let tempSetInfo = []
        this.homeInfo.roomList.map((House, idx) => {
          if (House.ifCheck) {
            let homeObj = {
              'home_id': this.homeId,
              'house_id': House.house_id,
              'register_id': this.$parent.globalData.register_id,
              'device_member': []
            }
            House.deviceList.map((Device, idx) => {
              if (Device.ifCheck) {
                let deviceObj = {
                  'second_control_id': Device.second_control_id,
                  'main_control_code': Device.main_control_code,
                  'register_id': this.$parent.globalData.register_id,
                  'second_control_device_id': Device.id,
                  'home_id': this.homeId,
                  'house_id': House.house_id
                }
                homeObj.device_member.push(deviceObj)
              }
            })
            tempSetInfo.push(homeObj)
          }
        })
        resolve(tempSetInfo)
      })
    }
    sureSaveSet (Info) {
      console.log('sureSaveSet---------------')
      return new Promise((resolve, reject) => {
        wepy.request({
          url: this.urlPre + '/authorization?home_id_member=' + this.homeId + '&register_id_member=' + this.MemberRegisterId,
          data: {
            home: Info
          },
          method: 'POST'
          // header: {
          //   'Content-Type': 'application/x-www-form-urlencoded'
          // }
        }).then((res) => {
          switch (res.data.code) {
            case 1:
              wepy.hideLoading()
              wepy.showToast({
                title: '授权成功!',
                icon: 'success'
              })
              resolve(res)
              break
            case 0:
              wepy.hideLoading()
              this.$invoke('toast', 'show', {
                title: '服务器繁忙！',
                img: '../../images/icons/attention.png'
              })
              break
            default:
              wepy.hideLoading()
              this.$invoke('toast', 'show', {
                title: '服务器繁忙！',
                img: '../../images/icons/attention.png'
              })
          }
        }).catch((res) => {
          console.log(res)
          wepy.hideLoading()
          this.$invoke('toast', 'show', {
            title: '服务器繁忙！',
            img: '../../images/icons/attention.png'
          })
        })
      })
    }

    events = {
    }
    onLoad (options) {
      this.homeId = options.HomeId
      this.homeRegisterId = options.homeRegisterId
      this.MemberRegisterId = options.MemberRegisterId
      this.member_avatar = options.avatar
      this.member_name = options.name
      this.member_phone = options.phone
      this.$apply()
      this.getIfAuthorized(options.HomeId)
      // this.getHomeWholeInfo(options.HomeId, null)
    }
  }
</script>
