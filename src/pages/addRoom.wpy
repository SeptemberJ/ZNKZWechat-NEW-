<style lang="less">
page{
  background: #efefef;
  padding-top: 20px;
  padding-bottom: 20px;
  font-size: 30rpx;
  .addRoom{
    width: 100%;
    display: flex;
    flex-direction: column;
    align-items: space-between;
    justify-content: flex-start;
    &_item{
      width: e("calc(100% - 40rpx)");
      height: 100rpx;
      display: flex;
      align-items: center;
      justify-content: space-between;
      padding: 0 20rpx;
      background:#fff;
      input{
        width: 100%;
        height: 100%;
      }
    }
    &_columnTit{
      width: e("calc(100% - 40rpx)");
      height: 100rpx;
      display: flex;
      align-items: center;
      justify-content: space-between;
      padding: 0 20rpx;
      color: #666;
      .columnItem{
        display: flex;
        align-items: center;
      }
      image{
        width: 50rpx;
        height: 50rpx;
      }
    }
    .recommendList{
      width: e("calc(100% - 40rpx)");
      display: flex;
      flex-wrap:wrap;
      align-items: center;
      justify-content: flex-start;
      padding: 0 20rpx;
      .recommendName{
        height: 60rpx;
        line-height: 60rpx;
        text-align: center;
        padding: 0 25rpx;
        margin: 0 30rpx 20rpx 0;
        border: 1px solid #efefef;
        border-radius: 15rpx;
        background: #fff;
        
      }
    }
    &_bt{
      width: 50%;
      text-align: center;
      line-height: 100rpx;
      background: #d81e06;
      font-size: 32rpx;
      color: #fff;
      margin: 20px auto auto auto;
      border-radius: 15rpx;
    }
  }
}
</style>
<template>
  <view class='addRoom'>
    <view class='addRoom_item'>
      <input @input="changeRoomName" type="text" name="homeName" placeholder="房间名称" value="{{roomName}}"/>
    </view>
    <view class='addRoom_columnTit'>
      <view class='columnItem'><text>推荐</text></view>
    </view>
    <view class='recommendList'>
      <view class='recommendName' wx:for-items="{{recommendList}}" wx:for-index="NameIndex" wx:for-item="NameItem" wx:key="NameIndex"><text @tap="chooseThisName({{NameItem}})">{{NameItem}}</text></view>
    </view>
    <view class='addRoom_bt' @tap="saveRoomName">确认</view>
    <toast />
  </view>
</template>

<script>
  import wepy from 'wepy'
  import { connect } from 'wepy-redux'
  import { changeAddRoomList } from '../store/actions'
  import Toast from 'wepy-com-toast'
  import testMixin from '../mixins/test'

  @connect({
    urlPre (state) {
      return state.counter.urlPre
    },
    curHome (state) {
      return state.counter.curHome
    }
  }, {
    changeAddRoomList
  })

  export default class Index extends wepy.page {
    config = {
      navigationBarTitleText: '添加房间'
    }
    components = {
      toast: Toast
    }

    mixins = [testMixin]

    data = {
      roomName: null,
      recommendList: []
    }

    computed = {

    }
    methods = {
      changeRoomName (e) {
        this.roomName = e.detail.value
        this.$apply()
      },
      chooseThisName (NAME) {
        console.log(NAME)
        this.roomName = NAME
        this.$apply()
      },
      saveRoomName () {
        if (this.roomName) {
          if (this.type === '1') {
            console.log('1-------------------')
            // 后来添加房间 直接保存添加
            this.addNewRoom()
          } else {
            console.log('2-------------------')
            // 创建你家时添加额外房间 回退更新
            this.methods.changeAddRoomList(this.roomName)
            wepy.navigateBack()
          }
        } else {
          console.log('else------')
          this.$invoke('toast', 'show', {
            title: '请输入房间名称!',
            img: '../images/icons/attention.png'
          })
          return false
        }
      }
    }

    // self fn
    addNewRoom () {
      wepy.showLoading({
        title: '加载中...'
      })
      return new Promise((resolve, reject) => {
        wepy.request({
          url: this.urlPre + '/house',
          data: {
            home_id: this.curHome.home_id,
            register_id: this.$parent.globalData.register_id,
            house_member: [{'house_name': this.roomName}]
          },
          method: 'POST'
        }).then((res) => {
          switch (res.data.code) {
            case 1:
              wepy.hideLoading()
              wepy.showToast({
                title: '添加成功!',
                icon: 'success'
              })
              setTimeout(() => {
                wepy.navigateBack()
              }, 1500)
              resolve(res)
              break
            case 0:
              wepy.hideLoading()
              this.$invoke('toast', 'show', {
                title: '添加失败！',
                img: '../images/icons/attention.png'
              })
              break
            default:
              wepy.hideLoading()
              this.$invoke('toast', 'show', {
                title: '服务器繁忙！',
                img: '../images/icons/attention.png'
              })
          }
        }).catch((res) => {
          console.log(res)
          wepy.hideLoading()
          this.$invoke('toast', 'show', {
            title: '服务器繁忙！',
            img: '../images/icons/attention.png'
          })
        })
      })
    }

    getOtherRoomName () {
      wepy.showLoading({
        title: '加载中'
      })
      return new Promise((resolve, reject) => {
        wepy.request({
          url: this.urlPre + '/list_others',
          data: {
          },
          method: 'GET'
        }).then((res) => {
          switch (res.data.code) {
            case 1:
              let TempName = []
              res.data.houseListAll.map((item, idx) => {
                TempName.push(item.dhouse_name)
              })
              this.recommendList = TempName
              this.$apply()
              wepy.hideLoading()
              resolve(res)
              break
            default:
              wepy.hideLoading()
              this.$invoke('toast', 'show', {
                title: '获取默认房间失败！',
                img: '../images/icons/attention.png'
              })
          }
        }).catch((res) => {
          console.log(res)
          wepy.hideLoading()
          this.$invoke('toast', 'show', {
            title: '服务器繁忙！',
            img: '../images/icons/attention.png'
          })
        })
      })
    }
    events = {
    }

    onLoad (options) {
      this.type = options.type
      this.getOtherRoomName()
    }
  }
</script>
