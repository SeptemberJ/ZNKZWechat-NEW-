<style lang="less">
page{
  font-size: 30rpx;
  background: #efefef;
}
.Automation_name{
  width: 100%;
  height: 80rpx;
  margin: 20rpx auto;
  display: flex;
  justify-content: flex-start;
  align-items: center;
  background: #fff;
}
.Automation_name text{
  width: 180rpx;
  padding: 10rpx 20rpx;
}
.Automation_name input{
  width: e("calc(100% - 220rpx - 20rpx)");
  padding: 10rpx;
  font-size: 32rpx;
}
.Automation_addBar{
  width: e("calc(100% - 40rpx)");
  height: 80rpx;
  padding: 20rpx;
  display: flex;
  justify-content: space-between;
  align-items: center;
}
.Automation_addBar text{
  font-size: 50rpx;
  font-weight: 700;
  color: #333;
}
.Automation_addBar_circle{
  width: 50rpx;
  height: 50rpx;
  border-radius: 50%;
  border: 1px solid #3498db;
  overflow: hidden;
}
.Automation_addBar_circle image{
  width: 50rpx;
  height: 50rpx;
  display: block;
}
.ListEmptyBlock{
  width: e("calc(100% - 40rpx)");
  padding: 20rpx;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  background: #fff;
}
.ListEmptyBlock_top{
  width: 100%;
  margin: 20rpx auto;
  display: flex;
  justify-content: center;
  align-items: center;
}
.ListEmptyBlock_top text{
  padding: 0 10rpx;
  color: #3498db;
  font-size: 32rpx;
}
/*条件列表  */
.Automation_conditionList{
  width: 100%;
  display: flex;
  flex-direction: column;
  justify-content: flex-start;
  align-items: center;
  background: #fff;
}
.Automation_EQ_item{
  width: 710rpx;
  height: 120rpx;
  display: flex;
  justify-content: flex-start;
  align-items: center;
  border-bottom: 1px solid #ccc;
}
.Automation_EQ_item_info{
  width: 310rpx;
  padding: 0 20rpx;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: flex-start;
}
.Automation_EQ_item_info text:first-of-type{
  font-size: 32rpx;
  color: #3498db;
}
.Automation_EQ_item_info text:last-of-type{
  font-size: 30rpx;
  color: #999;
}
.Automation_condition_when , .Automation_condition_status{
  width: 150rpx;
  color: #3498db;
}
.Automation_condition_status{
  text-align: right;
}
</style>
<template>
  <view class='AutomationIndex'>
    <view class='Automation_name'>
    <text>自动化名称：</text>
    <input placeholder='请输入自动化名称' @input='ChangeName' value='{{AutomationInfo.AutomaticName}}' disabled='{{CurHomeRole == 0}}'></input>
  </view>
  <!--条件  -->
  <view class='Automation_addBar'>
    <text>如果</text>
    <view class='Automation_addBar_circle' wx:if="{{AutomationInfo.ConditionList.length>0 && CurHomeRole == 1}}" bindtap='AddCondition'>
      <image src='../../../images/icons/add.png'></image>
    </view>
  </view>
  <view class='ListEmptyBlock' wx:if="{{AutomationInfo.ConditionList.length<=0}}">
    <view class='ListEmptyBlock_top' bindtap='AddCondition'>
      <view class='Automation_addBar_circle' >
        <image src='../../../images/icons/add.png'></image>
      </view>
      <text>添加自动化条件</text>
    </view>
    <text class='ColorRed'>'或'表示两个或两个以上条件,只要满足其中一项,所以列表中至少有两项为'或',请继续添加!</text>
  </view>
  <!--条件列表  -->
  <view class="Automation_conditionList" wx:if="{{AutomationInfo.ConditionList.length>0}}">
    <view class='Automation_EQ_item' wx:for-items="{{AutomationInfo.ConditionList}}" wx:for-index="ConditionIdx" wx:for-item="Condition" wx:key="ConditionIdx" @longtap='Delete' data-idx='{{ConditionIdx}}'>
      <!-- <image class='smallIcon' src="{{Condition.kind_name=='时间' ? '../../../../images/icons/scene_timing.png' : Condition.defalut_second_control_pic}}"></image> -->
      <view class='Automation_EQ_item_info'>
        <text>{{Condition.kind_name}}</text>
        <text></text>
      </view>
      <view class='Automation_condition_when'>
        <picker mode="multiSelector" bindchange="bindMultiPickerChange"  range="{{ConditionKind[Condition.kind_name]}}" range-key='timetype' data-idx='{{ConditionIdx}}'>
          <text>{{ConditionKind[Condition.kind_name][0][Condition.when].timetype}}</text>
        </picker>
      </view>
      <view class='Automation_condition_status' wx:if="{{Condition.kind_name!='时间'}}">
        <picker mode="multiSelector" bindchange="bindMultiPickerChange"  range="{{ConditionKind[Condition.kind_name]}}" range-key='timetype' data-idx='{{ConditionIdx}}'>
          <text>{{ConditionKind[Condition.kind_name][1][Condition.status].timetype}}</text>
        </picker>
      </view>
      <view class='Automation_condition_status' wx:if="{{Condition.kind_name=='时间'}}">
        <picker mode="time" value="{{Condition.time_start}}" bindchange="bindTimeChange_start" data-idx='{{ConditionIdx}}'>
          <text>{{Condition.time_start}}</text>
        </picker>
        <picker mode="time" value="{{Condition.time_end}}" bindchange="bindTimeChange_end" data-idx='{{ConditionIdx}}'>
          <text>{{Condition.time_end}}</text>
        </picker>
      </view>
    </view>
  </view>
  <!--动作  -->
  <view class='Automation_addBar'>
    <text>就</text>
    <view class='Automation_addBar_circle' wx:if="{{AutomationInfo.ActionList.length>0 && CurHomeRole == 1}}" bindtap='AddAction'>
      <image src='../../../images/icons/add.png'></image>
    </view>
  </view>
  <view class='ListEmptyBlock' wx:if="{{AutomationInfo.ActionList.length<=0}}">
    <view class='ListEmptyBlock_top' bindtap='AddAction'>
      <view class='Automation_addBar_circle'>
        <image src='../../../images/icons/add.png'></image>
      </view>
      <text>添加自动化动作</text>
    </view>
  </view>
  <!--动作列表  -->
  <view class="Automation_conditionList" wx:if="{{AutomationInfo.ActionList.length>0}}">
    <view class='Automation_EQ_item' wx:for-items="{{AutomationInfo.ActionList}}" wx:for-index="ActionIdx" wx:for-item="Action" wx:key="ActionIdx" bindlongtap='Delete' data-idx='{{ActionIdx}}'>
      <image class='smallIcon' src="{{Action.kind == 'scene'?Action.scenario_img:Action.device_img}}"></image>
      <view class='Automation_EQ_item_info'>
        <text>{{Action.kind == 'scene'?Action.fname:(Action.device_name || Action.fname)}}</text>
        <text>{{Action.kind == 'equipment'?Action.room_name:''}}</text>
      </view>
      <view class='Automation_condition_when'>
        <picker mode="multiSelector" bindchange="bindMultiPickerChangeAction"  range="{{ActionKind[Action.kind]}}" range-key='name' data-idx='{{ActionIdx}}'>
          <text>{{ActionKind[Action.kind][0][Action.status].name}}</text>
        </picker>
      </view>
      <view class='Automation_condition_status'>
        <picker mode="multiSelector" bindchange="bindMultiPickerChangeAction"  range="{{ActionKind[Action.kind]}}" range-key='name' data-idx='{{ActionIdx}}'>
          <text>{{ActionKind[Action.kind][1][Action.when].name}}</text>
        </picker>
      </view>
    </view>
  </view>


  <button wx:if="{{CurHomeRole != 0}}" class='MarginTB_40 HarfLongBt ColorWhite BgRed' @tap='Submit'>确定</button>
  <button wx:if="{{CurAutomaticId && CurHomeRole != 0}}" class='MarginTB_40 HarfLongBt ColorWhite BgGray' @tap='DeleteAutomatic'>删除</button>
  <toast/>
  </view>
</template>

<script>
  import wepy from 'wepy'
  import { connect } from 'wepy-redux'
  import Toast from 'wepy-com-toast'
  import testMixin from '../../../mixins/test'
  import { changeAutomationInfo } from '../../../store/actions'

  @connect({
    homeList (state) {
      return state.counter.homeList
    },
    urlPre (state) {
      return state.counter.urlPre
    },
    RoomIconList (state) {
      return state.counter.RoomIconList
    },
    CurHomeRole (state) {
      return state.counter.CurHomeRole
    },
    curHome (state) {
      return state.counter.curHome
    },
    AutomationInfo (state) {
      return state.counter.AutomationInfo
    }
  }, {
    changeAutomationInfo
  })

  export default class SceneIndex extends wepy.page {
    config = {
      navigationBarTitleText: '场景'
    }
    watch = {
      AutomationInfo (curVal, oldVal) {
        console.log('update---------')
        console.log(oldVal)
        console.log(curVal)
      }
    }
    components = {
      toast: Toast
    }

    mixins = [testMixin]

    data = {
      Type: 0,
      CurAutomaticId: '',
      RoomId: '',
      AutomaticName: '',
      ConditionList: [],
      ActionList: [],
      ConditionKind: {
        '时间': [
          [
            {
              id: 0,
              timetype: '变为'
            },
            {
              id: 1,
              timetype: '此时正好'
            }
          ]
        ]
      },
      ActionKind: {
        'equipment': [
          [
            {
              id: 0,
              name: '立即'
            },
            {
              id: 1,
              name: '1分钟'
            },
            {
              id: 2,
              name: '2分钟'
            },
            {
              id: 3,
              name: '3分钟'
            },
            {
              id: 4,
              name: '4分钟'
            },
            {
              id: 5,
              name: '5分钟'
            }
          ],
          [
            {
              id: 0,
              name: '打开'
            },
            {
              id: 1,
              name: '关闭'
            }
          ]
        ],
        'scene': [
          [
            {
              id: 0,
              name: '立即'
            },
            {
              id: 1,
              name: '1分钟'
            },
            {
              id: 2,
              name: '2分钟'
            },
            {
              id: 3,
              name: '3分钟'
            },
            {
              id: 4,
              name: '4分钟'
            },
            {
              id: 5,
              name: '5分钟'
            }
          ],
          [
            {
              id: 0,
              name: '执行'
            }
          ]
        ]
      }
    }

    computed = {
    }

    methods = {
      ChangeName (e) {
        let NewAutomationNameInfo = {
          type: 'automation_name',
          newInfo: e.detail.value
        }
        this.methods.changeAutomationInfo(NewAutomationNameInfo)
      },
      // AddAction
      AddAction () {
        this.$navigate('./action')
      },
      // AddCondition
      AddCondition () {
        this.$navigate('./condition')
      },
      // 改变时间
      bindTimeChange_start (e) {
        let Temp = this.AutomationInfo.ConditionList
        Temp[e.currentTarget.dataset.idx].time_start = e.detail.value
        let NewConditionInfo = {
          type: 'automation_update_ConditionList',
          newInfo: Temp
        }
        this.methods.changeAutomationInfo(NewConditionInfo)
      },
      bindTimeChange_end (e) {
        let Temp = this.AutomationInfo.ConditionList
        Temp[e.currentTarget.dataset.idx].time_end = e.detail.value
        let NewConditionInfo = {
          type: 'automation_update_ConditionList',
          newInfo: Temp
        }
        this.methods.changeAutomationInfo(NewConditionInfo)
      },
      bindMultiPickerChange(e) {
        let Temp = this.AutomationInfo.ConditionList
        Temp[e.currentTarget.dataset.idx].when = e.detail.value[0]
        if (e.detail.value[1]) {
          Temp[e.currentTarget.dataset.idx].status = e.detail.value[1]
        }
        let NewConditionInfo = {
          type: 'automation_update_ConditionList',
          newInfo: Temp
        }
        this.methods.changeAutomationInfo(NewConditionInfo)
      },
      bindMultiPickerChangeAction(e) {
        let Temp = this.AutomationInfo.ActionList
        Temp[e.currentTarget.dataset.idx].when = e.detail.value[1]
        Temp[e.currentTarget.dataset.idx].status = e.detail.value[0]
        let NewConditionInfo = {
          type: 'automation_update_ActionList',
          newInfo: Temp
        }
        this.methods.changeAutomationInfo(NewConditionInfo)
      },
      Submit() {
        if (this.data.Type === '0') {
          this.SubmitAdd()
        } else {
          this.SubmitModify()
        }
      },
      DeleteAutomatic () {
        return new Promise((resolve, reject) => {
          wepy.showModal({
            title: '提示',
            content: '确定删除该家?'
          }).then((res) => {
            if (res.confirm) {
              console.log('用户点击确定')
              this.sureDelete()
            } else if (res.cancel) {
              console.log('用户点击取消')
            }
            resolve(res)
          }).catch((res) => {
            console.log(res)
          })
        })
      }
    }

    // self FN
    // 默认从控列表
    getMasterControlType () {
      wepy.showLoading({
        title: '加载中'
      })
      return new Promise((resolve, reject) => {
        wepy.request({
          url: this.urlPre + '/secondControlDefault',
          method: 'GET'
        }).then((res) => {
          // let Temp = []
          var ControlType = res.data.secondControlDefaultList
          ControlType.map((item, idx) => {
            let Obj = []
            Obj.push(item.listDefaultSecondControlType)
            Obj.push(item.listDefaultSecondControlChangeType)
            this.ConditionKind[item.default_second_control_name] = Obj
          })
          wepy.hideLoading()
          this.$apply()
          console.log('this.ConditionKind--------------')
          console.log(this.ConditionKind)
          resolve(res.data.openid)
        }).catch((res) => {
          console.log(res)
          wepy.hideLoading()
          this.$invoke('toast', 'show', {
            title: '服务器繁忙！',
            img: '../../../images/icons/attention.png'
          })
        })
      })
    }
    // 获取创建信息
    GetAutomaticInfo(ID) {
      wepy.showLoading({
        title: '加载中...'
      })
      return new Promise((resolve, reject) => {
        wepy.request({
          url: this.urlPre + '/selectnoautomation?id=' + ID,
          method: 'GET',
          header: {
            'Content-Type': 'application/x-www-form-urlencoded'
          }
        }).then((res) => {
          wepy.hideLoading()
          switch (res.data.result) {
            case 1:
              let NewTimeInfo = {
                type: 'init',
                newInfo: res.data.automation.automations
              }
              this.methods.changeAutomationInfo(NewTimeInfo)
              resolve(res)
              break
            case 0:
              this.$invoke('toast', 'show', {
                title: '服务器繁忙！',
                img: '../../../images/icons/attention.png'
              })
              break
            default:
              this.$invoke('toast', 'show', {
                title: '服务器繁忙！',
                img: '../../../images/icons/attention.png'
              })
          }
        }).catch((res) => {
          console.log(res)
          wepy.hideLoading()
          this.$invoke('toast', 'show', {
            title: '服务器繁忙！',
            img: '../../../images/icons/attention.png'
          })
        })
      })
    }
    // 新增
    SubmitAdd () {
      // 校验
      if (this.AutomationInfo.AutomaticName === '') {
        this.$invoke('toast', 'show', {
          title: '请填写名称',
          img: '../../../images/icons/attention.png'
        })
        return false
      }
      if (this.AutomationInfo.ConditionList.length === 0) {
        this.$invoke('toast', 'show', {
          title: '请添加条件!',
          img: '../../../images/icons/attention.png'
        })
        return false
      }
      if (this.AutomationInfo.ActionList.length === 0) {
        this.$invoke('toast', 'show', {
          title: '请添加动作!',
          img: '../../../images/icons/attention.png'
        })
        return false
      }
      if (this.CurHomeRole === 3) {
        wepy.showModal({
          title: '提示',
          content: '权限不足！',
          showCancel: false
        })
        return false
      }
      wepy.showLoading({
        title: '加载中'
      })
      return new Promise((resolve, reject) => {
        wepy.request({
          url: this.urlPre + '/insertautomation',
          method: 'POST',
          data: {
            id: this.curHome.home_id,
            house_id: '',
            automations: this.AutomationInfo
          }
        }).then((res) => {
          console.log(res.data.scenario)
          switch (res.data.result) {
            case 1:
              wepy.hideLoading()
              wepy.showToast({
                title: '添加成功！',
                icon: 'success',
                duration: 1500
              })
              wepy.navigateBack()
              resolve(res)
              break
            case 0:
              wepy.hideLoading()
              this.$invoke('toast', 'show', {
                title: '服务器繁忙！',
                img: '../../../images/icons/attention.png'
              })
              break
            default:
              wepy.hideLoading()
              this.$invoke('toast', 'show', {
                title: '服务器繁忙！',
                img: '../../../images/icons/attention.png'
              })
          }
        }).catch((res) => {
          console.log(res)
          wepy.hideLoading()
          this.$invoke('toast', 'show', {
            title: '服务器繁忙！',
            img: '../../../images/icons/attention.png'
          })
        })
      })
    }
    // 修改
    SubmitModify () {
      // 校验
      if (this.AutomationInfo.AutomaticName === '') {
        this.$invoke('toast', 'show', {
          title: '请填写名称!',
          img: '../../../images/icons/attention.png'
        })
        return false
      }
      if (this.AutomationInfo.ConditionList.length === 0) {
        this.$invoke('toast', 'show', {
          title: '请添加条件!',
          img: '../../../images/icons/attention.png'
        })
        return false
      }
      if (this.AutomationInfo.ActionList.length === 0) {
        this.$invoke('toast', 'show', {
          title: '请添加动作!',
          img: '../../../images/icons/attention.png'
        })
        return false
      }
      if (this.CurHomeRole === 3) {
        wepy.showModal({
          title: '提示',
          content: '权限不足！',
          showCancel: false
        })
        return false
      }
      wepy.showLoading({
        title: '加载中'
      })
      // console.log(this.AutomationInfo)
      // debugger
      return new Promise((resolve, reject) => {
        wepy.request({
          url: this.urlPre + '/updateautomation',
          method: 'POST',
          data: {
            automationid: this.CurAutomaticId,
            id: this.curHome.home_id,
            // roomid: '',
            automations: this.AutomationInfo
          }
        }).then((res) => {
          console.log(res.data.scenario)
          switch (res.data.result) {
            case 1:
              wepy.hideLoading()
              wepy.showToast({
                title: '修改成功!',
                icon: 'success'
              })
              wepy.navigateBack()
              resolve(res)
              break
            case 0:
              wepy.hideLoading()
              this.$invoke('toast', 'show', {
                title: '服务器繁忙！',
                img: '../../../images/icons/attention.png'
              })
              break
            default:
              wepy.hideLoading()
              this.$invoke('toast', 'show', {
                title: '服务器繁忙！',
                img: '../../../images/icons/attention.png'
              })
          }
        }).catch((res) => {
          console.log(res)
          wepy.hideLoading()
          this.$invoke('toast', 'show', {
            title: '服务器繁忙！',
            img: '../../../images/icons/attention.png'
          })
        })
      })
    }
    // 删除场景
    sureDelete() {
      wepy.showLoading({
        title: '加载中...'
      })
      return new Promise((resolve, reject) => {
        wepy.request({
          url: this.urlPre + '/deleteautomation?id=' + this.CurAutomaticId,
          data: {
          },
          method: 'GET'
        }).then((res) => {
          switch (res.data.result) {
            case 1:
              wepy.hideLoading()
              wepy.showToast({
                title: '删除成功!',
                icon: 'success'
              })
              wepy.navigateBack()
              resolve(res)
              break
            default:
              wepy.hideLoading()
              this.$invoke('toast', 'show', {
                title: '删除失败！',
                img: '../../../images/icons/attention.png'
              })
          }
        }).catch((res) => {
          console.log(res)
          wepy.hideLoading()
          this.$invoke('toast', 'show', {
            title: '服务器繁忙！',
            img: '../../../images/icons/attention.png'
          })
        })
      })
    }

    onLoad(options) {
      this.Type = options.type // 0新增  1-修改
      this.CurAutomaticId = options.automaticid
      if (options.automaticid) {
        this.GetAutomaticInfo(options.automaticid)
      } else {
        console.log('no options.sceneid--------------')
      }
      this.$apply()
      this.getMasterControlType()
    }
    onShow() {
    }
  }
</script>
