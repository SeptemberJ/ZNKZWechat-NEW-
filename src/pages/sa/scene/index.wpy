<style lang="less">
page{
  background: #efefef;
  font-size: 30rpx;
}
.SceneItem{
  width: 750rpx;
  height: 100rpx;
  display: flex;
  justify-content: space-between;
  align-items: center;
  background: #fff;
  margin-top: 20rpx;
  overflow: hidden;
}
.SceneItem input{
  width: 400rpx;
  padding-right: 30rpx;
  font-size: 30rpx;
  text-align: right;
}
.SceneItem_icon , .SceneItem_arrow{
  width: 80rpx;
  height: 100%;
  display: flex;
  justify-content: center;
  align-items: center;
}
.SceneItem image{
  width: 50rpx;
  height: 50rpx;
  display: block;
}
.SceneItem_tit{
  width: e("calc(750rpx - 80rpx - 80rpx - 200rpx)");
  height: 80rpx;
  text-align: left;
  line-height: 80rpx;
}
.SceneItem_count{
  width: 200rpx;
  height: 80rpx;
  color: #999;
  text-align: right;
  line-height: 80rpx;
}
</style>
<template>
  <view class='SceneIndex'>
    <view class='SceneItem' style='height:120rpx;'>
      <picker-view indicator-style="height: 180rpx;" style="width: 60px; height: 30px;" value="{{Scene_Icon_index}}" bindchange="bindChange">
        <picker-view-column>
          <view wx:for-items="{{SceneIconList}}" wx:for-index="IconIdx" wx:for-item="Icon" wx:key="IconIdx" style="line-height: 50px;margin-left:20rpx;">
            <image style='width:30px;height:30px;' src="{{Icon.img}}"></image>
          </view>
        </picker-view-column>
      </picker-view>
      <input placeholder='场景名称' @input='ChangeSceneName' value='{{SceneInfo.Scene_name}}' ></input>
    </view>

    <view class='SceneItem' bindtap='ToTiming'>
      <view class='SceneItem_icon'>
        <image src='../../../images/icons/scene_timing.png'></image>
      </view>
      <text class='SceneItem_tit'>定时</text>
      <text class='SceneItem_count'></text>
      <view class='SceneItem_arrow'>
        <image src='../../../images/icons/arrow-right.png'></image>
      </view>
    </view>

    <view class='SceneItem' bindtap='ToEQList'>
      <view class='SceneItem_icon'>
        <image src='../../../images/icons/scene_eq.png'></image>
      </view>
      <text class='SceneItem_tit'>设备组合</text>
      <text class='SceneItem_count'>{{SceneInfo.Scene_EQList.length}}个</text>
      <view class='SceneItem_arrow'>
        <image src='../../../images/icons/arrow-right.png'></image>
      </view>
    </view>

    <view class='SceneItem' bindtap='ToLinkage'>
      <view class='SceneItem_icon'>
        <image src='../../../images/icons/scene_ld.png'></image>
      </view>
      <text class='SceneItem_tit'>自动化组合</text>
      <text class='SceneItem_count'>{{SceneInfo.Scene_AutomaticList.length}}个</text>
      <view class='SceneItem_arrow'>
        <image src='../../../images/icons/arrow-right.png'></image>
      </view>
    </view>

    <view class='SceneItem' bindtap='ToLog'>
      <view class='SceneItem_icon'>
        <image src='../../../images/icons/scene_log.png'></image>
      </view>
      <text class='SceneItem_tit'>日志</text>
      <text class='SceneItem_count'></text>
      <view class='SceneItem_arrow'>
        <image wx:if="{{Type == 1}}" src='../../../images/icons/arrow-right.png'></image>
      </view>
    </view>

    <button wx:if="{{CurHomeRole != 0}}" class='MarginTB_40 HarfLongBt ColorWhite BgRed' bindtap='Submit'>保存</button>
    <button wx:if="{{CurSceneId && CurHomeRole != 0}}" class='MarginTB_40 HarfLongBt ColorWhite  BgGray' bindtap='DeleteScene'>删除</button>
  <toast/>
  </view>
</template>

<script>
  import wepy from 'wepy'
  import { connect } from 'wepy-redux'
  import Toast from 'wepy-com-toast'
  import testMixin from '../../../mixins/test'
  import { changeSceneInfo } from '../../../store/actions'

  @connect({
    homeList (state) {
      return state.counter.homeList
    },
    urlPre (state) {
      return state.counter.urlPre
    },
    RoomIconList (state) {
      return state.counter.RoomIconList
    },
    CurHomeRole (state) {
      return state.counter.CurHomeRole
    },
    curHome (state) {
      return state.counter.curHome
    },
    SceneInfo (state) {
      return state.counter.SceneInfo
    }
  }, {
    changeSceneInfo
  })

  export default class SceneIndex extends wepy.page {
    config = {
      navigationBarTitleText: '场景'
    }
    watch = {
      SceneInfo (curVal, oldVal) {
        console.log('update---------')
        console.log(oldVal)
        console.log(curVal)
      }
    }
    components = {
      toast: Toast
    }

    mixins = [testMixin]

    data = {
      Type: 0, // 0新增  1-修改
      CurSceneId: null,
      RoomId: '',
      // IconList: [],
      // Scene_Icon: '',
      Scene_Icon_index: [0],
      SceneIconList: []
    }

    computed = {
    }

    methods = {
      ToTiming () {
        this.$navigate('./timing?sceneid=' + this.CurSceneId + '&roomid=' + this.RoomId)
      },
      ToEQList () {
        this.$navigate('./eqlist?sceneid=' + this.CurSceneId + '&roomid=' + this.RoomId)
      },
      ToLinkage () {
        this.$navigate('./zdlist?sceneid=' + this.CurSceneId + '&roomid=' + this.RoomId)
      },
      ToLog () {
        // this.$navigate('../log/index?sceneid=' + this.CurSceneId)
      },
      // 选择图片
      bindChange (e) {
        let NewTimeInfo = {
          type: 'scene_icon',
          newInfo: this.SceneIconList[e.detail.value[0]].img
        }
        this.methods.changeSceneInfo(NewTimeInfo)
      },
      // 改变场景名称
      ChangeSceneName (e) {
        let NewTimeInfo = {
          type: 'scene_name',
          newInfo: e.detail.value
        }
        this.methods.changeSceneInfo(NewTimeInfo)
      },
      // 更新定时
      // UpdateTiming (TimingInfo) {
      //   console.log('TimingInfo------------------')
      //   console.log(TimingInfo)
      //   // this.Scene_EQList.Scene_timing = TimingInfo
      //   this.SceneInfo.Scene_timing = TimingInfo
      //   this.$apply()
      // },
      // // 更新设备组合
      // UpdateChoosedEQList (ChoosedEQList) {
      //   // this.Scene_EQList.Scene_EQList = ChoosedEQList
      //   this.SceneInfo.Scene_EQList = ChoosedEQList
      //   this.SceneInfo.SceneEQCount = ChoosedEQList.length
      //   this.$apply()
      // },
      // // 更新联动组合
      // UpdateChoosedAutomaticList (AutomaticList) {
      //   // this.Scene_EQList.Scene_AutomaticList = AutomaticList
      //   this.SceneInfo.Scene_AutomaticList = AutomaticList
      //   this.SceneAutomaticCount = AutomaticList.length
      //   this.$apply()
      // },
      // 获取创建信息
      GetSceneInfo (_this, ID) {
        console.log('GetSceneInfo--------------------------')
        wepy.showLoading({
          title: '加载中...'
        })
        return new Promise((resolve, reject) => {
          wepy.request({
            url: _this.urlPre + '/selectnoscenario?id=' + ID,
            method: 'GET',
            header: {
              'Content-Type': 'application/x-www-form-urlencoded'
            }
          }).then((res) => {
            console.log(res.data.scenario)
            switch (res.data.result) {
              case 1:
                wepy.hideLoading()
                resolve(res)
                break
              case 0:
                wepy.hideLoading()
                _this.$invoke('toast', 'show', {
                  title: '服务器繁忙！',
                  img: '../../../images/icons/attention.png'
                })
                break
              default:
                wepy.hideLoading()
                _this.$invoke('toast', 'show', {
                  title: '服务器繁忙！',
                  img: '../../../images/icons/attention.png'
                })
            }
          }).catch((res) => {
            console.log(res)
            wepy.hideLoading()
            this.$invoke('toast', 'show', {
              title: '服务器繁忙！',
              img: '../../../images/icons/attention.png'
            })
          })
        })
      },
      
      // 新增 判断权限
      Submit () {
        if (this.CurHomeRole !== 1) {
          wepy.showModal({
            title: '提示',
            content: '权限不足！',
            showCancel: false
          })
          return false
        }
        if (this.Type === '0') { // 新增
          console.log('新增--------------')
          this.SubmitAdd()
        } else {              // 修改
          console.log('修改--------------')
          this.SubmitModify()
        }
      },
      // 删除场景
      DeleteScene () {
        return new Promise((resolve, reject) => {
          wepy.showModal({
            title: '提示',
            content: '确定删除该场景?'
          }).then((res) => {
            if (res.confirm) {
              console.log('用户点击确定')
              if (this.CurHomeRole === 3) {
                wepy.showModal({
                  title: '提示',
                  content: '权限不足！',
                  showCancel: false
                })
                return false
              }
              wepy.request({
                url: this.urlPre + '/deletescenario?id=' + this.CurSceneId,
                data: {
                },
                method: 'GET',
                header: {
                  'Content-Type': 'application/x-www-form-urlencoded'
                }
              }).then((res) => {
                console.log(res)
                switch (res.data.result) {
                  case 1:
                    wepy.showToast({
                      title: '删除成功！',
                      icon: 'success',
                      duration: 1500
                    })
                    wepy.navigateBack()
                    break
                  case 0:
                    wepy.hideLoading()
                    this.$invoke('toast', 'show', {
                      title: '已添加过！',
                      img: '../../../images/icons/attention.png'
                    })
                    break
                  default:
                    wepy.hideLoading()
                    this.$invoke('toast', 'show', {
                      title: '已添加过！',
                      img: '../../../images/icons/attention.png'
                    })
                }
              }).catch((res) => {
                console.log(res)
                wepy.hideLoading()
                this.$invoke('toast', 'show', {
                  title: '服务器繁忙！',
                  img: '../../../images/icons/attention.png'
                })
              })
            } else if (res.cancel) {
              console.log('用户点击取消')
            }
            resolve(res)
          }).catch((res) => {
            console.log(res)
          })
        })
      }

    }

    // self FN
    // 获取场景图标
    GetSceneIconList () {
      console.log('获取场景图标----------------')
      return new Promise((resolve, reject) => {
        wepy.request({
          url: this.urlPre + '/selectscenarioimg',
          method: 'POST',
          header: {
            'Content-Type': 'application/x-www-form-urlencoded'
          }
        }).then((res) => {
          switch (res.data.result) {
            case 1:
              // this.SceneIconList = res.data.scenariolist
              // this.$apply()
              wepy.hideLoading()
              resolve(res)
              break
            case 0:
              wepy.hideLoading()
              wepy.hideLoading()
              this.$invoke('toast', 'show', {
                title: '获取图标失败！',
                img: '../../../images/icons/attention.png'
              })
              break
            default:
              wepy.hideLoading()
              this.$invoke('toast', 'show', {
                title: '服务器繁忙！',
                img: '../../../images/icons/attention.png'
              })
          }
        }).catch((res) => {
          console.log(res)
          wepy.hideLoading()
          this.$invoke('toast', 'show', {
            title: '服务器繁忙！',
            img: '../../../images/icons/attention.png'
          })
        })
      })
    }
    // 新增
    SubmitAdd () {
      console.log(this.SceneInfo)
      // 校验
      if (this.SceneInfo.Scene_name === '') {
        this.$invoke('toast', 'show', {
          title: '请填写名称场景!',
          img: '../../../images/icons/attention.png'
        })
        return false
      }
      if (this.SceneInfo.Scene_timing.time_start === '') {
        this.$invoke('toast', 'show', {
          title: '请先定时!',
          img: '../../../images/icons/attention.png'
        })
        return false
      }
      if (this.SceneInfo.Scene_EQList.length === 0 && this.SceneInfo.Scene_AutomaticList.length === 0) {
        this.$invoke('toast', 'show', {
          title: '请绑定设备或自动化组合!',
          img: '../../../images/icons/attention.png'
        })
        return false
      }
      wepy.showLoading({
        title: '加载中...'
      })

      let DATA = this.SceneInfo
      return new Promise((resolve, reject) => {
        wepy.request({
          url: this.urlPre + '/insertscenario',
          data: {
            id: this.curHome.home_id,
            roomid: this.RoomId,
            scenarios: DATA
          },
          method: 'POST'
        }).then((res) => {
          console.log(res)
          switch (res.data.result) {
            case 1:
              wepy.showToast({
                title: '添加成功！',
                icon: 'success',
                duration: 1500
              })
              wepy.navigateBack()
              wepy.hideLoading()
              break
            case 2:
              wepy.hideLoading()
              this.$invoke('toast', 'show', {
                title: '已添加过！',
                img: '../../../images/icons/attention.png'
              })
              break
            case 0:
              wepy.hideLoading()
              this.$invoke('toast', 'show', {
                title: '服务器繁忙！',
                img: '../../../images/icons/attention.png'
              })
              break
            default:
              wepy.hideLoading()
              this.$invoke('toast', 'show', {
                title: '服务器繁忙！',
                img: '../../../images/icons/attention.png'
              })
          }
        }).catch((res) => {
          console.log(res)
          wepy.hideLoading()
          this.$invoke('toast', 'show', {
            title: '服务器繁忙！',
            img: '../../../images/icons/attention.png'
          })
        })
      })
    }
    // 修改
    SubmitModify () {
      console.log(this.SceneInfo)
      // 校验
      if (this.SceneInfo.Scene_name === '') {
        this.$invoke('toast', 'show', {
          title: '请填写名称场景!',
          img: '../../../images/icons/attention.png'
        })
        return false
      }
      if (this.SceneInfo.Scene_timing.time_start === '') {
        this.$invoke('toast', 'show', {
          title: '请先定时!',
          img: '../../../images/icons/attention.png'
        })
        return false
      }
      if (this.SceneInfo.Scene_EQList.length === 0 && this.SceneInfo.Scene_AutomaticList.length === 0) {
        this.$invoke('toast', 'show', {
          title: '请绑定设备或自动化组合!',
          img: '../../../images/icons/attention.png'
        })
        return false
      }
      wepy.showLoading({
        title: '加载中...'
      })
      let DATA = this.SceneInfo
      return new Promise((resolve, reject) => {
        wepy.request({
          url: this.urlPre + '/updatenoscenario',
          data: {
            scenarioid: this.CurSceneId,
            id: this.curHome.id,
            roomid: '',
            scenarios: DATA
          },
          method: 'POST'
        }).then((res) => {
          console.log(res)
          switch (res.data.result) {
            case 1:
              wepy.showToast({
                title: '修改成功！',
                icon: 'success',
                duration: 1500
              })
              wepy.navigateBack()
              wepy.hideLoading()
              break
            case 2:
              wepy.hideLoading()
              this.$invoke('toast', 'show', {
                title: '已添加过！',
                img: '../../../images/icons/attention.png'
              })
              break
            case 0:
              wepy.hideLoading()
              this.$invoke('toast', 'show', {
                title: '服务器繁忙！',
                img: '../../../images/icons/attention.png'
              })
              break
            default:
              wepy.hideLoading()
              this.$invoke('toast', 'show', {
                title: '服务器繁忙！',
                img: '../../../images/icons/attention.png'
              })
          }
        }).catch((res) => {
          console.log(res)
          wepy.hideLoading()
          this.$invoke('toast', 'show', {
            title: '服务器繁忙！',
            img: '../../../images/icons/attention.png'
          })
        })
      })
    }

    events = {
    }

    async getInfoAsync (options, _this) {
      console.log('getInfoAsync---------------------------')
      const ResGetSceneIconList = await this.GetSceneIconList(_this)
      this.SceneIconList = ResGetSceneIconList.data.scenariolist
      this.Type = options.type ? options.type : 0 // 0 新增  1-修改
      this.RoomId = options.roomid ? options.roomid : ''
      this.$apply()
      if (options.sceneid) {
        console.log('options.sceneid--------------')
        const ResGetSceneInfo = await this.methods.GetSceneInfo(_this, options.sceneid)
        let NewTimeInfo = {
          type: 'init',
          newInfo: ResGetSceneInfo.data.scenario.scenarios
        }
        this.methods.changeSceneInfo(NewTimeInfo)

        // 更新Scene_Icon_index
        ResGetSceneIconList.data.scenariolist.map((item, idx) => {
          if (item.img === ResGetSceneInfo.data.scenario.scenarios.Scene_Room_Icon) {
            this.Scene_Icon_index = [idx]
            this.$apply()
          }
        })
      } else {
        console.log('no options.sceneid--------------')
        let NewTimeInfo = {
          type: 'scene_icon',
          newInfo: ResGetSceneIconList.data.scenariolist[0].img
        }
        this.methods.changeSceneInfo(NewTimeInfo)
      }
    }

    onLoad(options) {
      this.getInfoAsync(options, this)
      this.CurSceneId = options.sceneid
      this.Type = options.type // 0新增  1-修改
      this.$apply()
    }
    onShow() {
    }
  }
</script>
